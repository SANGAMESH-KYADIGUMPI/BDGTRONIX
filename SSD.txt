#include <xc.h>
#include <stdint.h>

#define _XTAL_FREQ 8000000  // Define your microcontroller's oscillator frequency

// Define the connections to the SSD segments
#define SSD_A_PIN   RD0
#define SSD_B_PIN   RD1
#define SSD_C_PIN   RD2
#define SSD_D_PIN   RD3
#define SSD_E_PIN   RD4
#define SSD_F_PIN   RD5
#define SSD_G_PIN   RD6

// Function to display a digit on the SSD
void ssd_display(uint8_t digit) {
    // Define the patterns for each segment (assuming common cathode SSD)
    const uint8_t digitPatterns[] = {
        0b00111111,   // Digit 0
        0b00000110,   // Digit 1
        0b01011011,   // Digit 2
        0b01001111,   // Digit 3
        0b01100110,   // Digit 4
        0b01101101,   // Digit 5
        0b01111101,   // Digit 6
        0b00000111,   // Digit 7
        0b01111111,   // Digit 8
        0b01101111    // Digit 9
    };

    // Display the corresponding pattern on the SSD segments
    SSD_A_PIN = (digitPatterns[digit] >> 0) & 1;
    SSD_B_PIN = (digitPatterns[digit] >> 1) & 1;
    SSD_C_PIN = (digitPatterns[digit] >> 2) & 1;
    SSD_D_PIN = (digitPatterns[digit] >> 3) & 1;
    SSD_E_PIN = (digitPatterns[digit] >> 4) & 1;
    SSD_F_PIN = (digitPatterns[digit] >> 5) & 1;
    SSD_G_PIN = (digitPatterns[digit] >> 6) & 1;
}

void main(void) {
    TRISD = 0x00;       // Set PORTD as output for the SSD segments
    TRISA = 0x00;       // Set PORTA as output for controlling the digit selection
    
    while (1) {
        for (uint8_t digit = 0; digit < 10; digit++) {
            // Select a digit by setting the corresponding bit on PORTA
            PORTA = 1 << digit;

            // Display the digit on the SSD
            ssd_display(digit);

            __delay_ms(1000);  // Delay for 1 second
        }
    }
}
